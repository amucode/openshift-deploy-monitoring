apiVersion: v1
kind: Template
metadata:
  name: kubestatemetric
  creationTimestamp: null
parameters:
- name: NAMESPACE
  required: true
- name: APPLICATION_NAME
  required: true
- name: KUBE_STATE_METRIC_IMAGE
  required: true

objects:
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    generation: 1
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    triggers:
      - type: "ConfigChange"
    replicas: 1
    selector:
      app: ${APPLICATION_NAME}
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 300
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: ${APPLICATION_NAME}
      spec:
        containers:
          - name: kube-state-metrics
            image: ${KUBE_STATE_METRIC_IMAGE}
            ports:
              - containerPort: 8080
                protocol: TCP
            resources: {}
            terminationMessagePath: /dev/termination-log
            imagePullPolicy: Always
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        dnsPolicy: ClusterFirst
        serviceAccountName: prometheus
        serviceAccount: prometheus

- apiVersion: v1
  kind: Service
  metadata:
    annotations:
  #     prometheus.io/scrape: "true"
  # #TODO this is for TLS    prometheus.io/scheme: https
  #     prometheus.io/scheme: http
  #    service.alpha.openshift.io/serving-cert-secret-name: prometheus-tls
    labels:
      name: "${APPLICATION_NAME}"
    name: "${APPLICATION_NAME}"
    namespace: "${NAMESPACE}"
  spec:
    ports:
    - name: "${APPLICATION_NAME}"
  #TODO this is for TLS    port: 443
      port: 8080
      protocol: TCP
  #TODO this is for TLS    targetPort: 8443
      targetPort: 8080
    selector:
      app: "${APPLICATION_NAME}"

